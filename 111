#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <stack>
#include <stdexcept>
#include <queue>
#include "jsoncpp/json.h"
 
#define FIELD_MAX_HEIGHT 20
#define FIELD_MAX_WIDTH 20
#define MAX_GENERATOR_COUNT 4 // 每个象限1
#define MAX_PLAYER_COUNT 4
#define MAX_TURN 101
#define rep(i,j,k) for(int i=j;i<=k;i++)
 
// 你也可以选用 using namespace std; 但是会污染命名空间
using namespace std;


// 平台提供的吃豆人相关逻辑处理程序
namespace Pacman
{
	const time_t seed = time(0);
	const int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 }, dy[] = { -1, 0, 1, 0, -1, 1, 1, -1 };
 
	// 枚举定义；使用枚举虽然会浪费空间（sizeof(GridContentType) == 4），但是计算机处理32位的数字效率更高
 
	// 每个格子可能变化的内容，会采用“或”逻辑进行组合
	enum GridContentType
	{
		empty = 0, // 其实不会用到
		player1 = 1, // 1号玩家
		player2 = 2, // 2号玩家
		player3 = 4, // 3号玩家
		player4 = 8, // 4号玩家
		playerMask = 1 | 2 | 4 | 8, // 用于检查有没有玩家等
		smallFruit = 16, // 小豆子
		largeFruit = 32 // 大豆子
	};
 
	// 用玩家ID换取格子上玩家的二进制位
	GridContentType playerID2Mask[] = { player1, player2, player3, player4 };
	string playerID2str[] = { "0", "1", "2", "3" };
 
	// 让枚举也可以用这些运算了（不加会编译错误）
	template<typename T>
	inline T operator |=(T &a, const T &b)
	{
		return a = static_cast<T>(static_cast<int>(a) | static_cast<int>(b));
	}
	template<typename T>
	inline T operator |(const T &a, const T &b)
	{
		return static_cast<T>(static_cast<int>(a) | static_cast<int>(b));
	}  
	template<typename T>
	inline T operator &=(T &a, const T &b)
	{
		return a = static_cast<T>(static_cast<int>(a) & static_cast<int>(b));
	}
	template<typename T>
	inline T operator &(const T &a, const T &b)
	{
		return static_cast<T>(static_cast<int>(a) & static_cast<int>(b));
	}
	template<typename T>
	inline T operator ++(T &a)
	{
		return a = static_cast<T>(static_cast<int>(a) + 1);
	}
	template<typename T>
	inline T operator ~(const T &a)
	{
		return static_cast<T>(~static_cast<int>(a));
	}
 
	// 每个格子固定的东西，会采用“或”逻辑进行组合
	enum GridStaticType
	{
		emptyWall = 0, // 其实不会用到
		wallNorth = 1, // 北墙（纵坐标减少的方向）
		wallEast = 2, // 东墙（横坐标增加的方向）
		wallSouth = 4, // 南墙（纵坐标增加的方向）
		wallWest = 8, // 西墙（横坐标减少的方向）
		generator = 16 // 豆子产生器
	};
 
	// 用移动方向换取这个方向上阻挡着的墙的二进制位
	GridStaticType direction2OpposingWall[] = { wallNorth, wallEast, wallSouth, wallWest };
 
	// 方向，可以代入dx、dy数组，同时也可以作为玩家的动作
	enum Direction
	{
		stay = -1,
		up = 0,
		right = 1,
		down = 2,
		left = 3,
		// 下面的这几个只是为了产生器程序方便，不会实际用到
		ur = 4, // 右上
		dr = 5, // 右下
		dl = 6, // 左下
		ul = 7 // 左上
	};
 
	// 场地上带有坐标的物件
	struct FieldProp
	{
		FieldProp(int r,int c){
			row=r;
			col=c;
		}
		FieldProp(){}
		int row, col;
	};
 
	// 场地上的玩家
	struct Player : FieldProp
	{
		int strength;
		int powerUpLeft;
		bool dead;
	};
 
	// 回合新产生的豆子的坐标
	struct NewFruits
	{
		FieldProp newFruits[MAX_GENERATOR_COUNT * 8];
		int newFruitCount;
	} newFruits[MAX_TURN];
	int newFruitsCount = 0;
 
	// 状态转移记录结构
	struct TurnStateTransfer
	{
		enum StatusChange // 可组合
		{
			none = 0,
			ateSmall = 1,
			ateLarge = 2,
			powerUpCancel = 4,
			die = 8,
			error = 16
		};
 
		// 玩家选定的动作
		Direction actions[MAX_PLAYER_COUNT];
 
		// 此回合该玩家的状态变化
		StatusChange change[MAX_PLAYER_COUNT];
 
		// 此回合该玩家的力量变化
		int strengthDelta[MAX_PLAYER_COUNT];
	};
 
	// 游戏主要逻辑处理类，包括输入输出、回合演算、状态转移，全局唯一
	class GameField
	{
	private:
		// 为了方便，大多数属性都不是private的
 
		// 记录每回合的变化（栈）
		TurnStateTransfer backtrack[MAX_TURN];
 
		// 这个对象是否已经创建
		static bool constructed;
 
	public:
		// 场地的长和宽
		int height, width;
		int generatorCount;
		int GENERATOR_INTERVAL, LARGE_FRUIT_DURATION, LARGE_FRUIT_ENHANCEMENT;
 
		// 场地格子固定的内容
		GridStaticType fieldStatic[FIELD_MAX_HEIGHT][FIELD_MAX_WIDTH];
 
		// 场地格子会变化的内容
		GridContentType fieldContent[FIELD_MAX_HEIGHT][FIELD_MAX_WIDTH];
		int generatorTurnLeft; // 多少回合后产生豆子
		int aliveCount; // 有多少玩家存活
		int smallFruitCount;
		int turnID;
		FieldProp generators[MAX_GENERATOR_COUNT]; // 有哪些豆子产生器
		Player players[MAX_PLAYER_COUNT]; // 有哪些玩家
 
		// 玩家选定的动作
		Direction actions[MAX_PLAYER_COUNT];
  
		// 恢复到上次场地状态。可以一路恢复到最开始。
		// 恢复失败（没有状态可恢复）返回false
		bool PopState()
		{
			if (turnID <= 0)
				return false;
 
			const TurnStateTransfer &bt = backtrack[--turnID];
			int i, _;
 
			// 倒着来恢复状态
 
			for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				Player &_p = players[_];
				GridContentType &content = fieldContent[_p.row][_p.col];
				TurnStateTransfer::StatusChange change = bt.change[_];
 
				if (!_p.dead)
				{
					// 5. 大豆回合恢复
					if (_p.powerUpLeft || change & TurnStateTransfer::powerUpCancel)
						_p.powerUpLeft++;
 
					// 4. 吐出豆子
					if (change & TurnStateTransfer::ateSmall)
					{
						content |= smallFruit;
						smallFruitCount++;
					}
					else if (change & TurnStateTransfer::ateLarge)
					{
						content |= largeFruit;
						_p.powerUpLeft -= LARGE_FRUIT_DURATION;
					}
				}
 
				// 2. 魂兮归来
				if (change & TurnStateTransfer::die)
				{
					_p.dead = false;
					aliveCount++;
					content |= playerID2Mask[_];
				}
 
				// 1. 移形换影
				if (!_p.dead && bt.actions[_] != stay)
				{
					fieldContent[_p.row][_p.col] &= ~playerID2Mask[_];
					_p.row = (_p.row - dy[bt.actions[_]] + height) % height;
					_p.col = (_p.col - dx[bt.actions[_]] + width) % width;
					fieldContent[_p.row][_p.col] |= playerID2Mask[_];
				}
 
				// 0. 救赎不合法的灵魂
				if (change & TurnStateTransfer::error)
				{
					_p.dead = false;
					aliveCount++;
					content |= playerID2Mask[_];
				}
 
				// *. 恢复力量
				if (!_p.dead)
					_p.strength -= bt.strengthDelta[_];
			}
 
			// 3. 收回豆子
			if (generatorTurnLeft == GENERATOR_INTERVAL)
			{
				generatorTurnLeft = 1;
				NewFruits &fruits = newFruits[--newFruitsCount];
				for (i = 0; i < fruits.newFruitCount; i++)
				{
					fieldContent[fruits.newFruits[i].row][fruits.newFruits[i].col] &= ~smallFruit;
					smallFruitCount--;
				}
			}
			else
				generatorTurnLeft++;
 
			return true;
		}
 
		// 判断指定玩家向指定方向移动是不是合法的（没有撞墙且没有踩到豆子产生器）
		inline bool ActionValid(int playerID, Direction &dir) const
		{
			if (dir == stay)
				return true;
			const Player &p = players[playerID];
			const GridStaticType &s = fieldStatic[p.row][p.col];
			return dir >= -1 && dir < 4 && !(s & direction2OpposingWall[dir]) && !(s & generator);
		}
		
		inline bool ActionValid(FieldProp p, Direction &dir) const
		{
			if (dir == stay)
				return true;
			const GridStaticType &s = fieldStatic[p.row][p.col];
			return dir >= -1 && dir < 4 && !(s & direction2OpposingWall[dir]) && !(s & generator);
		}
		
		int distance(FieldProp a, FieldProp b)const {
			int x = abs(a.row - b.row);
			int y = abs(a.col - b.col);
			y = (y <= width - y) ? y : width - y;
			x = (x <= height - x) ? x : height - x;
			return x + y;
		}
		
		FieldProp Plus(FieldProp a, Direction dir)const {
			//cout<<width<<" "<<height<<endl;
			if (dir == stay){
				return a;
			}
			else {
				return FieldProp((a.row + dy[dir] + height) % height, (a.col + dx[dir] + width) % width);
			}
		}
		
		
		// 在向actions写入玩家动作后，演算下一回合局面，并记录之前所有的场地状态，可供日后恢复。
		// 是终局的话就返回false
		bool NextTurn()
		{
			int _, i, j;
 
			TurnStateTransfer &bt = backtrack[turnID];
			memset(&bt, 0, sizeof(bt));
 
			// 0. 杀死不合法输入
			for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				Player &p = players[_];
				if (!p.dead)
				{
					Direction &action = actions[_];
					if (action == stay)
						continue;
 
					if (!ActionValid(_, action))
					{
						bt.strengthDelta[_] += -p.strength;
						bt.change[_] = TurnStateTransfer::error;
						fieldContent[p.row][p.col] &= ~playerID2Mask[_];
						p.strength = 0;
						p.dead = true;
						aliveCount--;
					}
					else
					{
						// 遇到比自己强♂壮的玩家是不能前进的
						GridContentType target = fieldContent
							[(p.row + dy[action] + height) % height]
							[(p.col + dx[action] + width) % width];
						if (target & playerMask)
							for (i = 0; i < MAX_PLAYER_COUNT; i++)
								if (target & playerID2Mask[i] && players[i].strength > p.strength)
									action = stay;
					}
				}
			}
 
			// 1. 位置变化
			for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				Player &_p = players[_];
				if (_p.dead)
					continue;
 
				bt.actions[_] = actions[_];
 
				if (actions[_] == stay)
					continue;
 
				// 移动
				fieldContent[_p.row][_p.col] &= ~playerID2Mask[_];
				_p.row = (_p.row + dy[actions[_]] + height) % height;
				_p.col = (_p.col + dx[actions[_]] + width) % width;
				fieldContent[_p.row][_p.col] |= playerID2Mask[_];
			}
 
			// 2. 玩家互殴
			for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				Player &_p = players[_];
				if (_p.dead)
					continue;
 
				// 判断是否有玩家在一起
				int player, containedCount = 0;
				int containedPlayers[MAX_PLAYER_COUNT];
				for (player = 0; player < MAX_PLAYER_COUNT; player++)
					if (fieldContent[_p.row][_p.col] & playerID2Mask[player])
						containedPlayers[containedCount++] = player;
 
				if (containedCount > 1)
				{
					// NAIVE
					for (i = 0; i < containedCount; i++)
						for (j = 0; j < containedCount - i - 1; j++)
							if (players[containedPlayers[j]].strength < players[containedPlayers[j + 1]].strength)
								swap(containedPlayers[j], containedPlayers[j + 1]);
 
					int begin;
					for (begin = 1; begin < containedCount; begin++)
						if (players[containedPlayers[begin - 1]].strength > players[containedPlayers[begin]].strength)
							break;
 
					// 这些玩家将会被杀死
					int lootedStrength = 0;
					for (i = begin; i < containedCount; i++)
					{
						int id = containedPlayers[i];
						Player &p = players[id];
 
						// 从格子上移走
						fieldContent[p.row][p.col] &= ~playerID2Mask[id];
						p.dead = true;
						int drop = p.strength / 2;
						bt.strengthDelta[id] += -drop;
						bt.change[id] |= TurnStateTransfer::die;
						lootedStrength += drop;
						p.strength -= drop;
						aliveCount--;
					}
 
					// 分配给其他玩家
					int inc = lootedStrength / begin;
					for (i = 0; i < begin; i++)
					{
						int id = containedPlayers[i];
						Player &p = players[id];
						bt.strengthDelta[id] += inc;
						p.strength += inc;
					}
				}
			}
 
			// 3. 产生豆子
			if (--generatorTurnLeft == 0)
			{
				generatorTurnLeft = GENERATOR_INTERVAL;
				NewFruits &fruits = newFruits[newFruitsCount++];
				fruits.newFruitCount = 0;
				for (i = 0; i < generatorCount; i++)
					for (Direction d = up; d < 8; ++d)
					{
						// 取余，穿过场地边界
						int r = (generators[i].row + dy[d] + height) % height, c = (generators[i].col + dx[d] + width) % width;
						if (fieldStatic[r][c] & generator || fieldContent[r][c] & (smallFruit | largeFruit))
							continue;
						fieldContent[r][c] |= smallFruit;
						fruits.newFruits[fruits.newFruitCount].row = r;
						fruits.newFruits[fruits.newFruitCount++].col = c;
						smallFruitCount++;
					}
			}
 
			// 4. 吃掉豆子
			for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				Player &_p = players[_];
				if (_p.dead)
					continue;
 
				GridContentType &content = fieldContent[_p.row][_p.col];
 
				// 只有在格子上只有自己的时候才能吃掉豆子
				if (content & playerMask & ~playerID2Mask[_])
					continue;
 
				if (content & smallFruit)
				{
					content &= ~smallFruit;
					_p.strength++;
					bt.strengthDelta[_]++;
					smallFruitCount--;
					bt.change[_] |= TurnStateTransfer::ateSmall;
				}
				else if (content & largeFruit)
				{
					content &= ~largeFruit;
					if (_p.powerUpLeft == 0)
					{
						_p.strength += LARGE_FRUIT_ENHANCEMENT;
						bt.strengthDelta[_] += LARGE_FRUIT_ENHANCEMENT;
					}
					_p.powerUpLeft += LARGE_FRUIT_DURATION;
					bt.change[_] |= TurnStateTransfer::ateLarge;
				}
			}
 
			// 5. 大豆回合减少
			for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				Player &_p = players[_];
				if (_p.dead)
					continue;
 
				if (_p.powerUpLeft > 0 && --_p.powerUpLeft == 0)
				{
					_p.strength -= LARGE_FRUIT_ENHANCEMENT;
					bt.change[_] |= TurnStateTransfer::powerUpCancel;
					bt.strengthDelta[_] += -LARGE_FRUIT_ENHANCEMENT;
				}
			}
 
			++turnID;
 
			// 是否只剩一人？
			if (aliveCount <= 1)
			{
				for (_ = 0; _ < MAX_PLAYER_COUNT; _++)
					if (!players[_].dead)
					{
						bt.strengthDelta[_] += smallFruitCount;
						players[_].strength += smallFruitCount;
					}
				return false;
			}
 
			// 是否回合超限？
			if (turnID >= 100)
				return false;
 
			return true;
		}
 
		// 读取并解析程序输入，本地调试或提交平台使用都可以。
		// 如果在本地调试，程序会先试着读取参数中指定的文件作为输入文件，失败后再选择等待用户直接输入。
		// 本地调试时可以接受多行以便操作，Windows下可以用 Ctrl-Z 或一个【空行+回车】表示输入结束，但是在线评测只需接受单行即可。
		// localFileName 可以为NULL
		// obtainedData 会输出自己上回合存储供本回合使用的数据
		// obtainedGlobalData 会输出自己的 Bot 上以前存储的数据
		// 返回值是自己的 playerID
		int ReadInput(const char *localFileName, string &obtainedData, string &obtainedGlobalData)
		{
			string str, chunk;
#ifdef _BOTZONE_ONLINE
			std::ios::sync_with_stdio(false); //ω\\)
			getline(cin, str);
#else
			if (localFileName)
			{
				std::ifstream fin(localFileName);
				if (fin)
					while (getline(fin, chunk) && chunk != "")
						str += chunk;
				else
					while (getline(cin, chunk) && chunk != "")
						str += chunk;
			}
			else
				while (getline(cin, chunk) && chunk != "")
					str += chunk;
#endif
			Json::Reader reader;
			Json::Value input;
			reader.parse(str, input);
 
			int len = input["requests"].size();
 
			// 读取场地静态状况
			Json::Value field = input["requests"][(Json::Value::UInt) 0],
				staticField = field["static"], // 墙面和产生器
				contentField = field["content"]; // 豆子和玩家
			height = field["height"].asInt();
			width = field["width"].asInt();
			LARGE_FRUIT_DURATION = field["LARGE_FRUIT_DURATION"].asInt();
			LARGE_FRUIT_ENHANCEMENT = field["LARGE_FRUIT_ENHANCEMENT"].asInt();
			generatorTurnLeft = GENERATOR_INTERVAL = field["GENERATOR_INTERVAL"].asInt();
 
			PrepareInitialField(staticField, contentField);
 
			// 根据历史恢复局面
			for (int i = 1; i < len; i++)
			{
				Json::Value req = input["requests"][i];
				for (int _ = 0; _ < MAX_PLAYER_COUNT; _++)
					if (!players[_].dead)
						actions[_] = (Direction)req[playerID2str[_]]["action"].asInt();
				NextTurn();
			}
 
			obtainedData = input["data"].asString();
			obtainedGlobalData = input["globaldata"].asString();
 
			return field["id"].asInt();
		}
 
		// 根据 static 和 content 数组准备场地的初始状况
		void PrepareInitialField(const Json::Value &staticField, const Json::Value &contentField)
		{
			int r, c, gid = 0;
			generatorCount = 0;
			aliveCount = 0;
			smallFruitCount = 0;
			generatorTurnLeft = GENERATOR_INTERVAL;
			for (r = 0; r < height; r++)
				for (c = 0; c < width; c++)
				{
					GridContentType &content = fieldContent[r][c] = (GridContentType)contentField[r][c].asInt();
					GridStaticType &s = fieldStatic[r][c] = (GridStaticType)staticField[r][c].asInt();
					if (s & generator)
					{
						generators[gid].row = r;
						generators[gid++].col = c;
						generatorCount++;
					}
					if (content & smallFruit)
						smallFruitCount++;
					for (int _ = 0; _ < MAX_PLAYER_COUNT; _++)
						if (content & playerID2Mask[_])
						{
							Player &p = players[_];
							p.col = c;
							p.row = r;
							p.powerUpLeft = 0;
							p.strength = 1;
							p.dead = false;
							aliveCount++;
						}
				}
		}
 
		// 完成决策，输出结果。
		// action 表示本回合的移动方向，stay 为不移动
		// tauntText 表示想要叫嚣的言语，可以是任意字符串，除了显示在屏幕上不会有任何作用，留空表示不叫嚣
		// data 表示自己想存储供下一回合使用的数据，留空表示删除
		// globalData 表示自己想存储供以后使用的数据（替换），这个数据可以跨对局使用，会一直绑定在这个 Bot 上，留空表示删除
		void WriteOutput(Direction action, string tauntText = "", string data = "", string globalData = "") const
		{
			Json::Value ret;
			ret["response"]["action"] = action;
			ret["response"]["tauntText"] = tauntText;
			ret["data"] = data;
			ret["globaldata"] = globalData;
			ret["debug"] = (Json::Int)seed;
 
#ifdef _BOTZONE_ONLINE
			Json::FastWriter writer; // 在线评测的话能用就行……
#else
			Json::StyledWriter writer; // 本地调试这样好看 > <
#endif
			cout << writer.write(ret) << endl;
		}
 
		// 用于显示当前游戏状态，调试用。
		// 提交到平台后会被优化掉。
		inline void DebugPrint() const
		{
#ifndef _BOTZONE_ONLINE
			printf("回合号【%d】存活人数【%d】| 图例 产生器[G] 有玩家[0/1/2/3] 多个玩家[*] 大豆[o] 小豆[.]\n", turnID, aliveCount);
			for (int _ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				const Player &p = players[_];
				printf("[玩家%d(%d, %d)|力量%d|加成剩余回合%d|%s]\n",
					_, p.row, p.col, p.strength, p.powerUpLeft, p.dead ? "死亡" : "存活");
			}
			putchar(' ');
			putchar(' ');
			for (int c = 0; c < width; c++)
				printf("  %d ", c);
			putchar('\n');
			for (int r = 0; r < height; r++)
			{
				putchar(' ');
				putchar(' ');
				for (int c = 0; c < width; c++)
				{
					putchar(' ');
					printf((fieldStatic[r][c] & wallNorth) ? "---" : "   ");
				}
				printf("\n%d ", r);
				for (int c = 0; c < width; c++)
				{
					putchar((fieldStatic[r][c] & wallWest) ? '|' : ' ');
					putchar(' ');
					int hasPlayer = -1;
					for (int _ = 0; _ < MAX_PLAYER_COUNT; _++)
						if (fieldContent[r][c] & playerID2Mask[_])
							if (hasPlayer == -1)
								hasPlayer = _;
							else
								hasPlayer = 4;
					if (hasPlayer == 4)
						putchar('*');
					else if (hasPlayer != -1)
						putchar('0' + hasPlayer);
					else if (fieldStatic[r][c] & generator)
						putchar('G');
					else if (fieldContent[r][c] & playerMask)
						putchar('*');
					else if (fieldContent[r][c] & smallFruit)
						putchar('.');
					else if (fieldContent[r][c] & largeFruit)
						putchar('o');
					else
						putchar(' ');
					putchar(' ');
				}
				putchar((fieldStatic[r][width - 1] & wallEast) ? '|' : ' ');
				putchar('\n');
			}
			putchar(' ');
			putchar(' ');
			for (int c = 0; c < width; c++)
			{
				putchar(' ');
				printf((fieldStatic[height - 1][c] & wallSouth) ? "---" : "   ");
			}
			putchar('\n');
#endif
		}
 
		Json::Value SerializeCurrentTurnChange()
		{
			Json::Value result;
			TurnStateTransfer &bt = backtrack[turnID - 1];
			for (int _ = 0; _ < MAX_PLAYER_COUNT; _++)
			{
				result["actions"][_] = bt.actions[_];
				result["strengthDelta"][_] = bt.strengthDelta[_];
				result["change"][_] = bt.change[_];
			}
			return result;
		}
 
		// 初始化游戏管理器
		GameField()
		{
			if (constructed)
				throw runtime_error("请不要再创建 GameField 对象了，整个程序中只应该有一个对象");
			constructed = true;
 
			turnID = 0;
		}
 
		GameField(const GameField &b) : GameField() { }
	};
 
	bool GameField::constructed = false;
}


using namespace Pacman;
GameField *gmfield;
// 一些辅助程序


FieldProp next(FieldProp s,Direction dir,GameField& gameField){
	FieldProp ans(s.row+dy[dir],s.col+dx[dir]);
	int height=gameField.height;
	int width=gameField.width;
	if(ans.row<0) ans.row+=height;
	if(ans.row>=height) ans.row-=height;
	if(ans.col<0) ans.col+=width;
	if(ans.col>=width) ans.col-=width;
	return ans;
}

int naive_distance(Pacman::FieldProp p1,Pacman::FieldProp p2,Pacman::GameField& gameField=*gmfield){
	 int x1=p1.row,y1=p1.col,x2=p2.row,y2=p2.col;
	 int h=gameField.height,w=gameField.width;
	 if(x1>x2) swap(x1,x2);
	 if(y1>y2) swap(y1,y2);
	 int d1,d2;
	 d1=(x2-x1)>h/2?h-(x2-x1):x2-x1;
	 d2=(y2-y1)>w/2?w-(y2-y1):y2-y1;
	 return d1+d2;
}

int true_distance(Pacman::FieldProp p1,Pacman::FieldProp p2,Pacman::GameField& gameField=*gmfield){
	bool visited[FIELD_MAX_HEIGHT][FIELD_MAX_WIDTH];
	int dis[FIELD_MAX_HEIGHT][FIELD_MAX_WIDTH];
	memset(visited,0,sizeof(visited));
	memset(dis,0x7f,sizeof(dis));
	std::queue<Pacman::FieldProp> q;
	visited[p1.row][p1.col]=1;
	dis[p1.row][p1.col]=0;
	q.push(p1);
	while(!q.empty()){
		FieldProp p=q.front();
		q.pop();
		for(Direction dir=up;dir<ur;++dir){
			if(gameField.ActionValid(p,dir)){
				Pacman::FieldProp tmp=next(p,dir,gameField);
				if(!visited[tmp.row][tmp.col]){
					visited[tmp.row][tmp.col]=1;
					dis[tmp.row][tmp.col]=dis[p.row][p.col]+1;
					q.push(tmp);
				}
			}
		}
	}
	return dis[p2.row][p2.col];
}

int mindistance=0x7f7f7f7f;
double val_apple(Player pp,Pacman::FieldProp p1,Pacman::FieldProp p2,Pacman::GameField& gameField=*gmfield,double f=1){
	int n=true_distance(p1,p2,gameField);
	double flag=1;
	int cnt=0;
	bool visited[50][50];
	memset(visited,0,sizeof(visited));
	std::queue<FieldProp> q;
	q.push(p2);
	cnt++;
	visited[p2.row][p2.col]=1;
	while(!q.empty()){
		FieldProp p=q.front();
		q.pop();
		for(Direction dir=stay;dir<4;++dir){
			if(gameField.ActionValid(p,dir)){
				FieldProp nxt=next(p,dir,gameField);
				if((gameField.fieldContent[nxt.row][nxt.col])==smallFruit||(gameField.fieldContent[nxt.row][nxt.col])==largeFruit)
				if(!visited[nxt.row][nxt.col]){
					visited[nxt.row][nxt.col]=1;
					cnt++;
					q.push(nxt);
				}
			}
		}
	}
	rep(i,0,3){
		if(!gameField.players[i].dead){
			FieldProp p=gameField.players[i];
			if(true_distance(p,p2)<n&&true_distance(p,p2)<=2)
			if(gameField.players[i].strength>pp.strength)
			flag=0.5;
			else 
			flag=1.0; 
		}
	}
	if(n==0) return flag*f*2;
	return flag*f/((n+1)*(n+1))*sqrt(cnt);
} 


bool MustbeDead(GameField& gameField,int myID, Direction &dir) {
	for (int playerID = 0; playerID < MAX_PLAYER_COUNT; playerID++) {
		if (myID != playerID && !gameField.players[playerID].dead && gameField.players[playerID].strength > gameField.players[myID].strength) {
			FieldProp p(gameField.players[playerID].row, gameField.players[playerID].col);
			FieldProp me(gameField.players[myID].row,gameField.players[myID].col);
			if (dir > stay)
				me = gameField.Plus(me, dir);
			if (gameField.distance(p, me) <= 0)
				return true;
		}
	}
	return false;
}

struct Ans{
	bool dir[5];
	Ans(){}
	Ans(bool x){
		rep(i,0,4)
		dir[i]=x;
	}
	bool live(){
		rep(i,0,4)
		if(dir[i]) return 1;
		return 0;
	}
	friend Ans operator & (Ans a,Ans b){
		Ans tmp;
		rep(i,0,4) tmp.dir[i]=a.dir[i]&b.dir[i];
		return tmp; 
	}
};

Ans FindLiveDirection(Pacman::GameField &gameField, int TimeLeft, int myID, int KillerID = -1) {
	if(KillerID!=-1&&gameField.players[KillerID].dead)
	return Ans(1);
	Ans ans=Ans(1);
	if (TimeLeft == 0|| gameField.turnID==101)
		return ans;
	if (gameField.players[myID].dead)
	return Ans(0);
	Pacman::Player& me = gameField.players[myID];
	for (Direction dir = Pacman::stay; dir < 4; ++dir) {
		const Pacman::Player& Player = gameField.players[myID];
		if (gameField.ActionValid(myID, dir) && !MustbeDead(gameField, myID, dir)) {
			for (int playerID = 0; playerID < MAX_PLAYER_COUNT; playerID++) {
				Direction maxD = Pacman::stay;
				/*
				if (!gameField.players[playerID].dead && MaybeDead(gameField, playerID, maxD)) {
					for (Direction Dir = Pacman::up; Dir < 4; ++Dir) {
						if (gameField.ActionValid(playerID, Dir) && !MaybeDead(gameField, playerID, Dir))
							maxD = Dir;
					}
					if (maxD == Pacman::stay && MaybeDead(gameField, myID, maxD))
						for (Direction Dir = Pacman::up; Dir < 4; ++Dir) {
							if (gameField.ActionValid(playerID, Dir) && !MustbeDead(gameField, playerID, Dir))
								maxD = Dir;
						}
				}
				*/
				gameField.actions[playerID] = maxD;
			}
			gameField.actions[myID] = dir;
			if (KillerID == -1) { 
				bool flag = false;
				for (int playerID = 0; playerID < MAX_PLAYER_COUNT; playerID++) {
					Pacman::Player& killer = gameField.players[playerID];
					if (killer.strength > me.strength) {
						for (Pacman::Direction Dir = Pacman::up; Dir < 4; ++Dir)
							if (true_distance(killer,me)>true_distance(next(killer,Dir,gameField),me))
								gameField.actions[playerID] = Dir;
						flag = true;
					}
				}
				if (flag) {
					gameField.NextTurn();
					Ans tmp = FindLiveDirection(gameField, TimeLeft - 1, myID, KillerID);
					gameField.PopState();
					ans.dir[dir+1] = (tmp.live()) ? true : false;
				}
			}	
			else {
				Pacman::Player& killer = gameField.players[KillerID];
				if (killer.strength > me.strength) {
					for (Pacman::Direction Dir = Pacman::up; Dir < 4; ++Dir)
						if (true_distance(killer,me)>true_distance(next(killer,Dir,gameField),me)) {
							gameField.actions[KillerID] = Dir;
							gameField.NextTurn();
							Ans tmp = FindLiveDirection(gameField, TimeLeft - 1, myID, KillerID);
							gameField.PopState();
							ans.dir[dir+1] = (tmp.live()) ? true : false;
						}
				}
			}
		}
		else
		ans.dir[dir+1] = false;
	}
	return ans;
}

int my_AI(GameField& gameField,int my_ID){
	double priority[5]={0};
	Player me=gameField.players[my_ID];
	 
	for(Pacman::Direction dir=Pacman::stay;dir<4;++dir){
		if(!gameField.ActionValid(my_ID,dir))
		priority[dir+1]=-1000;
	}
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	//处理追&逃
	Ans ans(1);
	rep(i,0,3){
		if(i!=my_ID&&!gameField.players[i].dead)
		ans=ans&FindLiveDirection(gameField, 5, my_ID, i);
	}
	rep(i,0,4)
	if(ans.dir[i]) ;
	else priority[i]-=1000;
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	rep(i,0,4){
		if(i!=my_ID&&!gameField.players[i].dead&&gameField.players[i].strength<gameField.players[my_ID].strength){
			Ans ans=FindLiveDirection(gameField, 2, i, my_ID);
			if(!ans.live()){
				for(Direction dir=stay;dir<4;++dir){
					FieldProp p=next(me,dir,gameField);
					if(true_distance(p,gameField.players[i])<true_distance(me,gameField.players[i]))
					priority[dir+1]+=(double)gameField.players[i].strength/10.0;
				}
			}
		}
	}
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	for(Pacman::Direction dir=Pacman::stay;dir<4;++dir){
		if(priority[dir+1]>-500){	//可行 
			for(int i=0;i<MAX_PLAYER_COUNT;i++){
				Player tmp=gameField.players[i];
				if(i!=my_ID&&tmp.dead==0){
					if(tmp.strength>me.strength&&true_distance(tmp,me)<=2){
						FieldProp p=next(me,dir,gameField);
						if(true_distance(p,tmp,gameField)>true_distance(me,tmp,gameField))
						;
						if(true_distance(p,tmp,gameField)<true_distance(me,tmp,gameField))
						priority[dir+1]-=100;
					}
					if(tmp.strength<me.strength&&me.powerUpLeft!=1&&true_distance(tmp,me)<=2){
						FieldProp p=next(me,dir,gameField);
						if(true_distance(p,tmp,gameField)>true_distance(me,tmp,gameField))
						;
						if(true_distance(p,tmp,gameField)<true_distance(me,tmp,gameField))
						priority[dir+1]+=1.5;
					}
				}
			} 
		}
	}
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	
	for(int i=0;i<4;i++){
		if(i!=my_ID&&!gameField.players[i].dead){
			FieldProp p1=gameField.players[i];
			FieldProp p2=gameField.players[my_ID];
			if(p1.col==p2.col&&p1.row==p2.row){
				Direction dir=(Direction)((rand()%5)-1);
				while(!gameField.ActionValid(my_ID,dir)||priority[dir+1]<-10.0)
				Direction dir=(Direction)((rand()%5)-1);
				priority[dir+1]+=3;
			}
		}
	}
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	//处理苹果 
	double delta_p[5]={0};
	int cnt=0;
	for(Pacman::Direction dir=Pacman::stay;dir<4;++dir){
		if(priority[dir+1]>-500){
			double ans=0;
			FieldProp tmp=next(me,dir,gameField);
			for(int i=0;i<gameField.height;i++)
			for(int j=0;j<gameField.width;j++){
				if((gameField.fieldContent[i][j])==smallFruit||(gameField.fieldContent[i][j])==largeFruit)
				mindistance=min(mindistance,true_distance(me,FieldProp(i,j)));
			}
			for(int i=0;i<gameField.height;i++)
			for(int j=0;j<gameField.width;j++){
				if((gameField.fieldContent[i][j])==smallFruit){
					cnt++;
					FieldProp tmp1=FieldProp(i,j);
					ans+=val_apple(me,tmp,tmp1,gameField);
				}
				if((gameField.fieldContent[i][j])==largeFruit){
					cnt++;
					FieldProp tmp1=FieldProp(i,j);
					ans+=val_apple(me,tmp,tmp1,gameField,1.2);
				}
			}
			delta_p[dir+1]+=ans;
		}
	}
	double mx=0;
	rep(i,0,4){
		if(delta_p[i]>mx){
			mx=delta_p[i];
		}
	}
	if(mx>0.2)
	rep(i,0,4)
	priority[i]+=(delta_p[i]/mx)*5.0;
	else
	rep(i,0,4)
	priority[i]+=delta_p[i]*25.0;
	memset(delta_p,0,sizeof(delta_p));
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	//处理豆子生成器 
	for(Pacman::Direction dir=Pacman::stay;dir<4;++dir){
		FieldProp tmp=next(me,dir,gameField);
		if(priority[dir+1]>-500)
		if(gameField.generatorTurnLeft<=5||cnt==0){
			int curID=gameField.turnID;
			while(gameField.turnID%20!=0){
				rep(i,0,3)
				gameField.actions[i]=stay;
				gameField.NextTurn();
			}
			
			double ans=0;
			mindistance=0x7f7f7f7f;
			for(int i=0;i<gameField.height;i++)
			for(int j=0;j<gameField.width;j++){
				if((gameField.fieldContent[i][j])==smallFruit||(gameField.fieldContent[i][j])==largeFruit)
				mindistance=min(mindistance,true_distance(me,FieldProp(i,j)));
			}
			for(int i=0;i<gameField.height;i++)
			for(int j=0;j<gameField.width;j++){
				if((gameField.fieldContent[i][j])==smallFruit){
					cnt++;
					FieldProp tmp1=FieldProp(i,j);
					ans+=val_apple(me,tmp,tmp1,gameField);
				}
				if((gameField.fieldContent[i][j])==largeFruit){
					cnt++;
					FieldProp tmp1=FieldProp(i,j);
					ans+=val_apple(me,tmp,tmp1,gameField,1.2);
				}
			}
			delta_p[dir+1]+=ans;
			while(gameField.turnID!=curID){
				gameField.PopState();
			}
		}
		
		/*
		if(gameField.generatorTurnLeft<=5||cnt==0){
			int d=0x7f,id=0;
			for(int i=0;i<gameField.generatorCount;i++){
				int dist=true_distance(me,gameField.generators[i],gameField);
				rep(j,0,3){
					if(!gameField.players[j].dead){
						if(gameField.players[j].strength>gameField.players[my_ID].strength) 
						if(true_distance(gameField.players[j],gameField.generators[i],gameField)<=2)
						dist+=2;
					}
				}
				if(dist<d){
					d=dist;
					id=i;
				}
			}
			if(true_distance(me,gameField.generators[id],gameField)<=2)
			continue;
			if(true_distance(tmp,gameField.generators[id],gameField)<true_distance(tmp,gameField.generators[id],gameField))
			priority[dir+1]+=5;
			else
			priority[dir+1]-=5;
		} 
		*/
	} 
	mx=0;
	rep(i,0,4){
		if(delta_p[i]>mx){
			mx=delta_p[i];
		}
	}
	if(mx>0.2)
	rep(i,0,4)
	priority[i]+=(delta_p[i]/mx)*5.0;
	else
	rep(i,0,4)
	priority[i]+=delta_p[i]*25.0;
	memset(delta_p,0,sizeof(delta_p));
	
	//rep(i,0,4) cout<<priority[i]<<" ";
	//cout<<endl;
	
	double maxp=-999;
	int maxid=0;
	for(int i=1;i<5;i++){
		if(priority[i]>maxp){
			maxp=priority[i];
			maxid=i;
		}
	}
	return maxid;
}
 
int main()
{
	srand(time(0));
	Pacman::GameField gameField;
	gmfield=&gameField;
	string data, globalData; // 这是回合之间可以传递的信息
	// 如果在本地调试，有input.txt则会读取文件内容作为输入
	// 如果在平台上，则不会去检查有无input.txt
	int myID = gameField.ReadInput("input.txt", data, globalData); // 输入，并获得自己ID
	srand(Pacman::seed + myID);
 
	// 简单随机，看哪个动作随机赢得最多
	/*
	for (int i = 0; i < 1000; i++)
		Helpers::RandomPlay(gameField, myID);
	int maxD = 0, d;
	for (d = 0; d < 5; d++)
		if (Helpers::actionScore[d] > Helpers::actionScore[maxD])
			maxD = d;
	*/
	int maxD;
			
 	maxD=my_AI(gameField,myID);
	// 输出当前游戏局面状态以供本地调试。注意提交到平台上会自动优化掉，不必担心。
	gameField.DebugPrint();
	
	//cout<<maxD<<endl;
 
	// 随机决定是否叫嚣
	if (rand() % 6)
		gameField.WriteOutput((Pacman::Direction)(maxD - 1), "", data, globalData);
	else
		gameField.WriteOutput((Pacman::Direction)(maxD - 1), "Hello, cruel world", data, globalData);
	return 0;
}
